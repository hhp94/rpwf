% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rpwf_db_schema.R
\name{rpwf_add_py_model}
\alias{rpwf_add_py_model}
\title{Add scikit-learn Models to database}
\usage{
rpwf_add_py_model(
  con,
  py_module,
  py_base_learner,
  r_engine,
  hyper_par_rename,
  model_mode
)
}
\arguments{
\item{con}{(\code{DBI::dbConnect()})\cr
a \code{\link[DBI:dbConnect]{DBI::dbConnect()}} object, created by \link{DbCon}. Access with \code{DbCon$new()$con}.}

\item{py_module}{the module in scikit-learn, i.e., "sklearn.ensemble".}

\item{py_base_learner}{the base learner in scikit-learn, i.e.,
"RandomForestClassifier".}

\item{r_engine}{the engine in parsnip, i.e., "ranger" or "rpart".}

\item{hyper_par_rename}{a named list of equivalent hyper parameters, i.e.,
\code{list(cost_complexity = "ccp_alpha")}}

\item{model_mode}{classification or regression}
}
\value{
Use for side effect to update DB, not returning any values
}
\description{
Use this function to add or update the scikit-learn model using the module (i.e.,
"xgboost"), the base learner in scikit-learn (i.e., "XGBClassifier"),
the corresponding \code{{parsnip}} engine (i.e., "xgboost"), the equivalent hyper
parameter names (i.e., "mtry" in \code{{parsnip}} is "colsample_bytree"), and
model mode (i.e., "classification")
}
\examples{
# Generate dummy database
db_con <- rpwf_connect_db("db.SQLite", tempdir())
DBI::dbListTables(db_con$con)
DBI::dbGetQuery(db_con$con, "SELECT * FROM model_type_tbl") # before adding
rpwf_add_py_model(
  db_con$con,
  "sklearn.ensemble",
  "RandomForestClassifier",
  "rpart",
  list(
    cost_complexity = "ccp_alpha",
    tree_depth = "max_depth",
    min_n = "min_samples_split"
  ),
  "classification"
)
DBI::dbGetQuery(db_con$con, "SELECT * FROM model_type_tbl") # after adding
}
