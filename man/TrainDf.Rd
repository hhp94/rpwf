% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rpwf_main_R6_classes.R
\name{TrainDf}
\alias{TrainDf}
\title{Internal R6 object that process the data transformation}
\description{
A R6 object that manage the export of metadata and parquet file of the
transformed data defined by the recipe for data transformation.
}
\section{Super class}{
\code{\link[rpwf:Base]{rpwf::Base}} -> \code{TrainDf}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{prepped}}{(\code{recipes::prep()})\cr
holds the prepped object}

\item{\code{term_info}}{(\code{dplyr::tibble()})\cr
the \code{self$prepped} object has the attribute \code{term_info} that has
information of transformed variable before actually transforming the data}

\item{\code{idx_col}}{(\code{character()})\cr
Having a pre-defined index in R makes working with pandas.DataFrame less
error prone. Defined by the provided recipe}

\item{\code{target}}{(\code{character()})\cr
Name of the target variable. If missing, then a message is returned to say
that a test df is assumed to be generated. Defined by the provided recipe}

\item{\code{predictors}}{(\code{character()})\cr
List of names of the predictors. Stored as JSON string to be parsed in
python into a python list}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TrainDf-new}{\code{TrainDf$new()}}
\item \href{#method-TrainDf-set_idx_col}{\code{TrainDf$set_idx_col()}}
\item \href{#method-TrainDf-set_target_col}{\code{TrainDf$set_target_col()}}
\item \href{#method-TrainDf-set_predictors}{\code{TrainDf$set_predictors()}}
\item \href{#method-TrainDf-clone}{\code{TrainDf$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="Base" data-id="create_folder"><a href='../../rpwf/html/Base.html#method-Base-create_folder'><code>rpwf::Base$create_folder()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="Base" data-id="exec_query"><a href='../../rpwf/html/Base.html#method-Base-exec_query'><code>rpwf::Base$exec_query()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="Base" data-id="export"><a href='../../rpwf/html/Base.html#method-Base-export'><code>rpwf::Base$export()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="Base" data-id="export_db"><a href='../../rpwf/html/Base.html#method-Base-export_db'><code>rpwf::Base$export_db()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="Base" data-id="export_parquet"><a href='../../rpwf/html/Base.html#method-Base-export_parquet'><code>rpwf::Base$export_parquet()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="Base" data-id="query_path"><a href='../../rpwf/html/Base.html#method-Base-query_path'><code>rpwf::Base$query_path()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="Base" data-id="set_db_folder"><a href='../../rpwf/html/Base.html#method-Base-set_db_folder'><code>rpwf::Base$set_db_folder()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="Base" data-id="set_df"><a href='../../rpwf/html/Base.html#method-Base-set_df'><code>rpwf::Base$set_df()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="Base" data-id="set_export_query"><a href='../../rpwf/html/Base.html#method-Base-set_export_query'><code>rpwf::Base$set_export_query()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="Base" data-id="set_hash"><a href='../../rpwf/html/Base.html#method-Base-set_hash'><code>rpwf::Base$set_hash()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="Base" data-id="set_path"><a href='../../rpwf/html/Base.html#method-Base-set_path'><code>rpwf::Base$set_path()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="Base" data-id="set_query_results"><a href='../../rpwf/html/Base.html#method-Base-set_query_results'><code>rpwf::Base$set_query_results()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TrainDf-new"></a>}}
\if{latex}{\out{\hypertarget{method-TrainDf-new}{}}}
\subsection{Method \code{new()}}{
Create a new instance of the TrainDf class. Also process TestDf if a
target column is not provided in the recipe. See \code{?rprw::Base} for
details about the attributes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainDf$new(recipe, db_con)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{recipe}}{(\code{recipes::recipe()})\cr
provided recipe that defines how the data is transformed}

\item{\code{db_con}}{(\code{DbCon})\cr
a\link{DbCon} object}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TrainDf-set_idx_col"></a>}}
\if{latex}{\out{\hypertarget{method-TrainDf-set_idx_col}{}}}
\subsection{Method \code{set_idx_col()}}{
Set the index column as defined by the recipe
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainDf$set_idx_col()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TrainDf-set_target_col"></a>}}
\if{latex}{\out{\hypertarget{method-TrainDf-set_target_col}{}}}
\subsection{Method \code{set_target_col()}}{
Set the target column as defined by the recipe. Assume to be test data
if the target is not found.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainDf$set_target_col()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TrainDf-set_predictors"></a>}}
\if{latex}{\out{\hypertarget{method-TrainDf-set_predictors}{}}}
\subsection{Method \code{set_predictors()}}{
Store the list of predictors defined by the recipe as a json string
to be parsed in python
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainDf$set_predictors()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TrainDf-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TrainDf-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainDf$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
