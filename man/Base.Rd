% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rpwf_main_R6_classes.R
\name{Base}
\alias{Base}
\title{Internal R6 object only for setting up inheritance}
\description{
A R6 object that provides a common set of methods to 1- store the metadata of
data in the db, and 2- export parquet files for python to import. Not
meant to be called manually
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{hash}}{(\code{character()})\cr
hash of the object by \code{\link[rlang:hash]{rlang::hash()}}}

\item{\code{path}}{(\code{character()})\cr
path to the file in the project folder}

\item{\code{df}}{(\code{data.frame()})\cr
the df for the hyper param grid or the transformed df}

\item{\code{con}}{(\code{DBI::dbConnect()})\cr
a \code{\link[DBI:dbConnect]{DBI::dbConnect()}} object, created by \code{\link[=rpwf_db_con]{rpwf_db_con()}}}

\item{\code{export_query}}{(\code{glue::glue_sql()})\cr
SQL query to upload metadata of the data into the db}

\item{\code{query_results}}{(\code{glue::glue_sql()})\cr
SQL query results to check if the object already exists}

\item{\code{proj_root_path}}{(\code{character()})\cr
root path of the project, using \code{here::here()} is recommended}

\item{\code{db_folder}}{(\code{character()})\cr
the hyper param grid and transformed df are stored in separate folders.
This attribute holds the name of that folder}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Base-new}{\code{Base$new()}}
\item \href{#method-Base-exec_query}{\code{Base$exec_query()}}
\item \href{#method-Base-set_hash}{\code{Base$set_hash()}}
\item \href{#method-Base-set_path}{\code{Base$set_path()}}
\item \href{#method-Base-set_db_folder}{\code{Base$set_db_folder()}}
\item \href{#method-Base-set_query_results}{\code{Base$set_query_results()}}
\item \href{#method-Base-set_export_query}{\code{Base$set_export_query()}}
\item \href{#method-Base-export_db}{\code{Base$export_db()}}
\item \href{#method-Base-export_parquet}{\code{Base$export_parquet()}}
\item \href{#method-Base-export}{\code{Base$export()}}
\item \href{#method-Base-query_path}{\code{Base$query_path()}}
\item \href{#method-Base-create_folder}{\code{Base$create_folder()}}
\item \href{#method-Base-clone}{\code{Base$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-new"></a>}}
\if{latex}{\out{\hypertarget{method-Base-new}{}}}
\subsection{Method \code{new()}}{
This class is the parent of RGrid and TrainDf R6 object, not meant to be
called
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$new(df, con, proj_root_path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{df}}{(\code{data.frame()})\cr
the df that holds the hyper param grid of the transformed df itself.}

\item{\code{con}}{(\code{DBI::dbConnect()})\cr
a \code{\link[DBI:dbConnect]{DBI::dbConnect()}} object, created by \code{\link[=rpwf_db_con]{rpwf_db_con()}}}

\item{\code{proj_root_path}}{(\code{character()})\cr
input the project root path.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-exec_query"></a>}}
\if{latex}{\out{\hypertarget{method-Base-exec_query}{}}}
\subsection{Method \code{exec_query()}}{
Run the query that check if the object exists in the db by checking the
hash of the object in the db. Either find one unique row or no row
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$exec_query(query)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{(\code{glue::glue_sql()})\cr
SQL query for either the hyper parameter grid or the transformed df}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-set_hash"></a>}}
\if{latex}{\out{\hypertarget{method-Base-set_hash}{}}}
\subsection{Method \code{set_hash()}}{
Pass the hash of the object to this function to set the hash attribute
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$set_hash(val)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{val}}{(\code{any})\cr
New hash, either an integer or string}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-set_path"></a>}}
\if{latex}{\out{\hypertarget{method-Base-set_path}{}}}
\subsection{Method \code{set_path()}}{
Change the path where the object is stored
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$set_path(val)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{val}}{(\code{character()})\cr
Path to store the object on disk}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-set_db_folder"></a>}}
\if{latex}{\out{\hypertarget{method-Base-set_db_folder}{}}}
\subsection{Method \code{set_db_folder()}}{
Change the folder name that store the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$set_db_folder(val)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{val}}{(\code{character()})\cr
New folder names}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-set_query_results"></a>}}
\if{latex}{\out{\hypertarget{method-Base-set_query_results}{}}}
\subsection{Method \code{set_query_results()}}{
Store the results of the query from the db in a data.frame. Query have to
return a df (so \code{\link[=nrow]{nrow()}} works) with 0 <= \code{nrow()} < 2.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$set_query_results(val)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{val}}{(\code{data.frame()})\cr
New data frame generated by \code{self$exec_query}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-set_export_query"></a>}}
\if{latex}{\out{\hypertarget{method-Base-set_export_query}{}}}
\subsection{Method \code{set_export_query()}}{
Change the SQL query to export metadata to database
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$set_export_query(val)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{val}}{(\code{glue::glue_sql()})\cr
New SQL query to export metadata}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-export_db"></a>}}
\if{latex}{\out{\hypertarget{method-Base-export_db}{}}}
\subsection{Method \code{export_db()}}{
If the \code{self$export_query} is generated because metadata is not found in
the database, then export the metadata to the db using this query.
Otherwise return NULL
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$export_db()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-export_parquet"></a>}}
\if{latex}{\out{\hypertarget{method-Base-export_parquet}{}}}
\subsection{Method \code{export_parquet()}}{
If the file specified by \code{self$path} is not found, then export the file
as a parquet file to the location specified in the metadata.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$export_parquet()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-export"></a>}}
\if{latex}{\out{\hypertarget{method-Base-export}{}}}
\subsection{Method \code{export()}}{
Wrapper around exporting information to the db and writing the parquet
file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$export()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-query_path"></a>}}
\if{latex}{\out{\hypertarget{method-Base-query_path}{}}}
\subsection{Method \code{query_path()}}{
If the db query found no existing metadata, then an export path is made.
If the metadata is found by the data is not found, then an export path
is also made. Else get the path from the metadata in the db
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$query_path(path_query, new_export_query)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path_query}}{(\code{character()})\cr
Path to the object}

\item{\code{new_export_query}}{(\code{glue::glue_sql()})\cr
SQL query to export the obj metadata to the db}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-create_folder"></a>}}
\if{latex}{\out{\hypertarget{method-Base-create_folder}{}}}
\subsection{Method \code{create_folder()}}{
Create the "rpwfDb" folder to store the database if it doesn't exists
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$create_folder()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Base-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Base-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Base$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
