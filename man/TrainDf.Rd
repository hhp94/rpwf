% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rpwf_main_R6_classes.R
\name{TrainDf}
\alias{TrainDf}
\title{Internal R6 Object that Process the Data Transformation}
\description{
A R6 object that manage the export of metadata and parquet file of the
transformed data defined by the recipe for data transformation.
}
\details{
This object works by:
\itemize{
\item inherits from the \link{BaseEx} class.
\item accept a recipe and generate a prepped object with \code{\link[recipes:prep]{recipes::prep()}}.
\item use the prepped object to get the name of the pd.index, target, and
predictors.
\item calculate the hash of the prepped recipe (not the data frame) and check
the hash of the prepped recipe in the database.
\item if the hash is found in the database:
\itemize{
\item assign the path associated with the hash of the data.frame to \code{self$path}.
\item check if the file exists with the \code{self$path}.
\item if not exists, transform the prepped object with \code{\link[recipes:juice]{recipes::juice()}} and
assign to \code{self$df}.
\item if the file exists, then assign \code{NULL} to \code{self$df} attribute to stop
\code{self$export_parquet()} from executing.
}
\item if the hash is not found in the database:
\itemize{
\item transform the prepped object with \code{\link[recipes:juice]{recipes::juice()}} and assign to
\code{self$df}.
\item generate a new path to write the transformed data.
\item generate a SQL query to update the database with the new hash and new path
}
\item update the database with the generated SQL query with \code{self$export_db()}
\item write the parquet with \code{self$export_parquet()}
}
}
\keyword{internal}
\section{Super class}{
\code{\link[rpwf:BaseEx]{rpwf::BaseEx}} -> \code{TrainDf}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{prepped}}{(\code{recipes::prep()})\cr
holds the prepped object.}

\item{\code{term_info}}{(\code{dplyr::tibble()})\cr
the \code{self$prepped} object has the attribute \code{term_info} that has
information of transformed variable before actually transforming the data.}

\item{\code{idx_col}}{(\code{character()})\cr
Having a pre-defined index in R makes working with \code{pandas.DataFrame} less
error prone. Defined by the provided recipe.}

\item{\code{target}}{(\code{character()})\cr
Name of the target variable. If missing, then a message is returned to say
that a test df is assumed to be generated. Defined by the provided recipe.}

\item{\code{predictors}}{(\code{character()})\cr
List of names of the predictors. Stored as JSON string to be parsed in
python into a python list.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TrainDf-new}{\code{TrainDf$new()}}
\item \href{#method-TrainDf-set_idx_col}{\code{TrainDf$set_idx_col()}}
\item \href{#method-TrainDf-set_target_col}{\code{TrainDf$set_target_col()}}
\item \href{#method-TrainDf-set_predictors}{\code{TrainDf$set_predictors()}}
\item \href{#method-TrainDf-clone}{\code{TrainDf$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="BaseEx" data-id="create_folder"><a href='../../rpwf/html/BaseEx.html#method-BaseEx-create_folder'><code>rpwf::BaseEx$create_folder()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="BaseEx" data-id="exec_query"><a href='../../rpwf/html/BaseEx.html#method-BaseEx-exec_query'><code>rpwf::BaseEx$exec_query()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="BaseEx" data-id="export"><a href='../../rpwf/html/BaseEx.html#method-BaseEx-export'><code>rpwf::BaseEx$export()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="BaseEx" data-id="export_db"><a href='../../rpwf/html/BaseEx.html#method-BaseEx-export_db'><code>rpwf::BaseEx$export_db()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="BaseEx" data-id="export_parquet"><a href='../../rpwf/html/BaseEx.html#method-BaseEx-export_parquet'><code>rpwf::BaseEx$export_parquet()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="BaseEx" data-id="export_prep"><a href='../../rpwf/html/BaseEx.html#method-BaseEx-export_prep'><code>rpwf::BaseEx$export_prep()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="BaseEx" data-id="find_path_in_db"><a href='../../rpwf/html/BaseEx.html#method-BaseEx-find_path_in_db'><code>rpwf::BaseEx$find_path_in_db()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="BaseEx" data-id="set_db_folder"><a href='../../rpwf/html/BaseEx.html#method-BaseEx-set_db_folder'><code>rpwf::BaseEx$set_db_folder()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="BaseEx" data-id="set_df"><a href='../../rpwf/html/BaseEx.html#method-BaseEx-set_df'><code>rpwf::BaseEx$set_df()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="BaseEx" data-id="set_export_query"><a href='../../rpwf/html/BaseEx.html#method-BaseEx-set_export_query'><code>rpwf::BaseEx$set_export_query()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="BaseEx" data-id="set_hash"><a href='../../rpwf/html/BaseEx.html#method-BaseEx-set_hash'><code>rpwf::BaseEx$set_hash()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rpwf" data-topic="BaseEx" data-id="set_path"><a href='../../rpwf/html/BaseEx.html#method-BaseEx-set_path'><code>rpwf::BaseEx$set_path()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TrainDf-new"></a>}}
\if{latex}{\out{\hypertarget{method-TrainDf-new}{}}}
\subsection{Method \code{new()}}{
Create a new instance of the TrainDf class. Also process TestDf if a
target column is not provided in the recipe. See \code{?rprw::BaseEx} for
details about the attributes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainDf$new(recipe, db_con)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{recipe}}{(\code{recipes::recipe()})\cr
provided recipe that defines how the data is transformed.}

\item{\code{db_con}}{(\code{DbCon})\cr
a \link{DbCon} object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TrainDf-set_idx_col"></a>}}
\if{latex}{\out{\hypertarget{method-TrainDf-set_idx_col}{}}}
\subsection{Method \code{set_idx_col()}}{
Set the index column as defined by the recipe.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainDf$set_idx_col()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TrainDf-set_target_col"></a>}}
\if{latex}{\out{\hypertarget{method-TrainDf-set_target_col}{}}}
\subsection{Method \code{set_target_col()}}{
Set the target column as defined by the recipe. Assume to be test data
if the target is not found.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainDf$set_target_col()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TrainDf-set_predictors"></a>}}
\if{latex}{\out{\hypertarget{method-TrainDf-set_predictors}{}}}
\subsection{Method \code{set_predictors()}}{
Store the list of predictors defined by the recipe as a json string
to be parsed in python.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainDf$set_predictors()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TrainDf-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TrainDf-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainDf$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
